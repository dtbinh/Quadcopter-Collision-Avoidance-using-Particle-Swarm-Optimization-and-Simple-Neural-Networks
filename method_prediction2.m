function [Y,Xf,Af] = method_prediction2(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 02-Jul-2017 14:50:11.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.273644685725802;1.15658982322583;1.15658982322583];
x1_step1.gain = [0.0122136555397359;0.144513771691329;0.144513771691329];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.8421857249152973;3.2059269497391134;-1.0541188475696852;0.85416689472324836;-0.18019235298415001;-0.32482725186242029;-1.1109627066434997;3.0331244299940003;-3.4038619390066391;3.529664097427093];
IW1_1 = [0.55910273873094019 0.026589913451596087 1.944382338099115;-3.8362816655100764 -0.27562470852769927 -0.70343861105781502;1.4670261451614326 2.1812387409870886 1.2248406738493447;2.1422002842397037 -0.87122223266808618 -0.3182414797181029;0.28295080296379849 2.4665860608739565 -1.6273508239437013;0.43649676015349081 -2.0375836958893458 2.7831025451346965;-0.038606392088118474 -1.8433797059273589 -1.4712309239504129;0.91967021651432501 1.0582809020821164 1.1591105436981854;-0.94891145163266832 -1.3065588521732301 -1.2828440832990717;4.164129803866647 0.37200399752863605 -0.0099426155876453301];

% Layer 2
b2 = 2.6126737129811146;
LW2_1 = [-2.8052096027970235 -2.1777808634348315 -0.64934592684294334 1.2457076074955158 3.9402800983572073 3.3181926121989482 1.9112239480781443 0.88736674043760466 -0.96872514419046929 -2.8008251464780631];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n,~)
a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
